Data Aggregation
    MongoDB can perform aggregation operations, such as grouping by a specified key and evaluating a total or a count for each 
    distinct group.

    Use the aggregate() method to perform a stage-based aggregation. The aggregate() method accepts as its argument an array of stages,
    where each stage, processed sequentially, describes a data processing step.

    db.collection.aggregate( [ <stage1>, <stage2>, ... ] )


    Group Documents by a Field and Calculate Count
        Use the $group stage to group by a specified key. In the $group stage, specify the group by key in the _id field. 
        $group accesses fields by the field path, which is the field name prefixed by a dollar sign $. 
        The $group stage can use accumulators to perform calculations for each group. The following example groups the documents
        in the restaurants collection by the borough field and uses the $sum accumulator to count the documents for each group.

        db.restaurants.aggregate(
            [
                { $group: { "_id": "$borough", "count": { $sum: 1 } } }
            ]
        );
    
    Filter and Group Documents
        Use the $match stage to filter documents. $match uses the MongoDB query syntax. 
        The following pipeline uses $match to query the restaurants collection for documents with borough equal to "Queens" and cuisine equal
        to Brazilian. Then the $group stage groups the matching documents by the address.zipcode field and uses the $sum accumulator to 
        calculate the count. $group accesses fields by the field path, which is the field name prefixed by a dollar sign $

        db.restaurants.aggregate(
            [
                { $match: { "borough": "Queens", "cuisine": "Brazilian" } },
                { $group: { "_id": "$address.zipcode" , "count": { $sum: 1 } } }
            ]
        );